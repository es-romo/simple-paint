{"version":3,"sources":["state/Color.tsx","components/Title.tsx","components/Board/Canvas.ts","components/Board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ColorContext","createContext","Title","className","Canvas","ref","width","height","ratio","canvas","context","this","current","getContext","globalCompositeOperation","fillStyle","fillRect","colora","colorb","r","g","b","x","y","color","colorData","getImageData","data","a","canvasData","pos","j","step","i","tx","ty","newPos","left","right","baseColor","getColor","pixelStack","length","pop","upPos","matchColor","setSquare","curColor","push","putImageData","Board","fillColor","canvasRef","useRef","useState","board","setBoard","getPixelOrigin","rect","getBoundingClientRect","window","scrollX","top","scrollY","bottom","Math","trunc","useEffect","init","wipeCanvas","onClick","e","pageX","pageY","drawPixel","handleLeftClick","onContextMenu","preventDefault","console","log","fill","handleRightClick","App","setColor","Color","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12e7da18.chunk.js","sourcesContent":["import {Dispatch, SetStateAction} from 'react'\nimport {createContext} from 'react'\nimport { RGBColor } from 'react-color'\n \nexport interface IColorContext {\n    color: RGBColor,\n    setColor: Dispatch<SetStateAction<RGBColor>>\n}\n\nconst ColorContext = createContext<IColorContext | null>(null)\nexport default  ColorContext\n","import './Title.css'\nexport default function Title() {\n    return(\n        <div className='title'>\n            <h1>Esteban's Great Simple Paint</h1>\n        </div>\n    )\n}","import React from 'react'\nimport {RGBColor} from 'react-color'\nexport default class Canvas {\n\n    canvas: HTMLCanvasElement\n    width: number\n    height: number\n    ratio: number\n    context: CanvasRenderingContext2D\n\n    \n    constructor(ref: React.RefObject<HTMLCanvasElement>, width: number = 50, height: number= 50, ratio: number = 15){\n        this.canvas = ref.current!\n        this.context = this.canvas.getContext('2d')!\n        this.width = width * ratio\n        this.height = height * ratio\n        this.ratio = ratio\n    }\n    \n    wipeCanvas() {\n        this.context.globalCompositeOperation = 'destination-over'\n        this.context.fillStyle = 'white'\n        this.context.fillRect(0,0,this.canvas.width,this.canvas.height)\n        this.context.globalCompositeOperation = 'source-over'\n    }\n\n    matchColor(colora: RGBColor,colorb: RGBColor) {\n        return colora.r === colorb.r\n            && colora.g === colorb.g\n            && colora.b === colorb.b\n    }\n\n    drawPixel(x:number,y: number,color:RGBColor = {r:0,g:0,b:0}) {\n        const {r,g,b} = color\n        this.context.fillStyle = `rgb(${r},${g},${b})`\n        this.context.fillRect(x,y,this.ratio,this.ratio)\n    }\n\n    getColor(x: number,y: number){\n        const colorData = this.context.getImageData(x,y,1,1).data\n        return({\n            r: colorData[0],\n            g: colorData[1],\n            b: colorData[2],\n            a: colorData[3]\n        })\n    }\n\n    setSquare(canvasData: ImageData, pos: number, color:RGBColor = {r:0,g:0,b:0}){\n\n        for(let j = pos, step = 0; step < this.ratio; j += this.canvas.width * 4, step++){\n            for(let i = j; i < j + (this.ratio * 4); i += 4 ){\n                canvasData.data[i] = color.r;\n                canvasData.data[i+1] = color.g;\n                canvasData.data[i+2] = color.b;\n                canvasData.data[i+3] = 255;\n            }\n        }\n        return canvasData\n    }\n\n    fill(tx: number,ty: number,color: RGBColor = {r:0 ,g:0, b:0, a: 1}) {\n    \n        const baseColor = this.getColor(tx,ty)\n        let canvasData = this.context.getImageData(0,0,this.canvas.width,this.canvas.height)\n        let pixelStack = [[tx, ty]];\n        let x, y, newPos, pos, left, right\n        while(pixelStack.length){\n            newPos = pixelStack.pop();\n            x = newPos![0];\n            y = newPos![1];\n            \n            pos = (y* this.canvas.width + x) * 4;\n            let upPos = pos - (this.canvas.width * this.ratio * 4)\n            while(y - this.ratio >= 0 && this.matchColor(baseColor,{\n                r: canvasData.data[upPos],\n                g: canvasData.data[upPos+1],\n                b: canvasData.data[upPos+2]}))\n            {\n              y -= this.ratio\n              pos -= this.canvas.width * this.ratio * 4;\n              upPos = pos - (this.canvas.width * this.ratio * 4)\n            }\n            left = false;\n            right = false;\n            //traverse down\n            while(y < this.canvas.height && this.matchColor(baseColor,{\n                r: canvasData.data[pos],\n                g: canvasData.data[pos+1],\n                b: canvasData.data[pos+2]}))\n            {\n                canvasData = this.setSquare(canvasData,pos,color);\n                \n                if(x > this.ratio - 1){\n                    let curColor = {\n                        r: canvasData.data[pos - (4 * this.ratio)],\n                        g: canvasData.data[pos - (4 * this.ratio) + 1],\n                        b: canvasData.data[pos - (4 * this.ratio) + 2]}\n                        if(this.matchColor(baseColor,curColor))\n                        {\n                            if(!left){\n                            pixelStack.push([x - this.ratio, y]);\n                            left = true;\n                        }\n                    }\n                    else if(left)\n                    {\n                        left = false;\n                    }\n                }\n                \n                if(x < this.canvas.width - this.ratio)\n                {\n                    let curColor = {\n                        r: canvasData.data[pos + (4 * this.ratio)],\n                        g: canvasData.data[pos + (4 * this.ratio) + 1],\n                        b: canvasData.data[pos + (4 * this.ratio) + 2]\n                    }\n                    if(this.matchColor(baseColor,curColor))\n                    {\n                        if(!right){\n                            pixelStack.push([x + this.ratio, y]);\n                            right = true;\n                        }\n                    }\n                    else if(right){\n                        right = false;\n                    }\n                }\n                        \n                pos += this.canvas.width * this.ratio * 4;\n                y+= this.ratio\n            }\n        }\n        this.context.putImageData(canvasData, 0, 0);\n    }\n\n    init(){\n        this.canvas.width = this.width\n        this.canvas.height = this.height\n    }\n}","import {useRef, useEffect, useState} from 'react'\nimport { RGBColor } from 'react-color'\nimport Canvas from './Canvas'\nimport './Board.css'\n\nexport default function Board() {\n    \n    //Temp variables\n    const canvasHeight = 50\n    const canvasWidth = 50\n    const canvasRatio = 15\n    const fillColor:RGBColor = {\n        r: 128,\n        g: 0,\n        b: 0,\n        a: 1\n    }\n    \n    //Hook\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const [board, setBoard] = useState<Canvas | null>(null)\n    \n    useEffect(() => {\n        setBoard(new Canvas(canvasRef, canvasHeight,canvasWidth,canvasRatio))\n    }, [])\n\n    useEffect(() => {\n        if (board){\n            board.init()\n            board.wipeCanvas()\n        }\n    },[board])\n\n    //Event Handlers\n    function handleLeftClick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>){\n        const {x, y} = getPixelOrigin(e.pageX, e.pageY)\n        board!.drawPixel(x,y,fillColor)\n    }\n\n    function handleRightClick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>){\n        e.preventDefault()\n        const {x, y} = getPixelOrigin(e.pageX, e.pageY)\n        console.log({x,y})\n        board?.fill(x,y,fillColor)\n    }\n\n    //Helper functions\n    function getPixelOrigin(x: number,y: number){\n        const canvas = canvasRef.current!\n        const rect = canvas.getBoundingClientRect()\n        const left = rect.left + window.scrollX;\n        const top = rect.top + window.scrollY;\n        const right = rect.right  + window.scrollX;\n        const bottom = rect.bottom + window.scrollY;\n    \n        const originX = Math.trunc(((x - left) / (right - left) * canvas.width) / canvasRatio) * canvasRatio\n        const originY = Math.trunc(((y - top) / (bottom - top) * canvas.height) / canvasRatio) * canvasRatio\n        return {\n            x: originX,\n            y: originY\n        }\n    }\n\n    return(\n        <div className='board'>\n            <canvas \n                ref={canvasRef}\n                onClick={ e => handleLeftClick(e)}\n                onContextMenu={ e => handleRightClick(e) }\n            >    \n            </canvas>\n        </div>\n    )\n}","import {useState} from 'react'\nimport {RGBColor} from 'react-color'\nimport ColorContext from './state/Color'\nimport Title from './components/Title'\nimport Board from './components/Board'\nimport './App.css';\n\nfunction App() {  \n\n  const [color,setColor] = useState<RGBColor>({r:0,g:0,b:0,a:1})\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <ColorContext.Provider value={{color, setColor}}>\n        <Board/>\n      </ColorContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}