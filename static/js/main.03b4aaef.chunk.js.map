{"version":3,"sources":["state/Tool.tsx","state/Color.tsx","state/Dimensions.tsx","components/Title.tsx","components/Board/Canvas.ts","components/Board/index.tsx","components/ToolBox/ColorPicker/index.tsx","components/ToolBox/Dimensions/index.tsx","components/ToolBox/Tools/index.tsx","components/ToolBox/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToolOption","createContext","Title","className","Canvas","ref","canvas","ratio","context","this","current","getContext","globalCompositeOperation","fillStyle","fillRect","width","height","colora","colorb","r","g","b","x","y","color","colorData","getImageData","data","a","canvasData","pos","j","step","i","tx","ty","baseColor","getColor","matchColor","newPos","left","right","pixelStack","length","pop","upPos","setSquare","curColor","push","putImageData","wipeCanvas","Board","useContext","ColorContext","dimensions","DimensionsContext","tool","ToolContext","canvasRef","useRef","useState","board","setBoard","handleCLick","e","rect","getBoundingClientRect","window","scrollX","top","scrollY","bottom","originX","Math","trunc","originY","getPixelOrigin","pageX","pageY","PENCIL","drawPixel","FILL","fill","useEffect","init","onClick","presets","ColorPicker","ctxColor","colors","triangle","onChange","setColor","rgb","Dimensions","setDimensions","changeDimensions","target","name","value","number","floor","Number","type","Tools","setTool","ToolBox","App","Color","Provider","Tool","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03b4aaef.chunk.js","sourcesContent":["import {Dispatch, SetStateAction} from 'react'\nimport {createContext} from 'react'\n\nexport enum ToolOption {\n    PENCIL,\n    FILL\n}\n\ninterface IToolContext {\n    tool: ToolOption,\n    setTool: Dispatch<SetStateAction<ToolOption>>\n}\n\nexport default createContext<IToolContext | null>(null)","import {Dispatch, SetStateAction} from 'react'\nimport {createContext} from 'react'\nimport { RGBColor } from 'react-color'\n \ninterface IColorContext {\n    color: RGBColor,\n    setColor: Dispatch<SetStateAction<RGBColor>>\n}\n\nexport default createContext<IColorContext | null>(null)","import {Dispatch, SetStateAction} from 'react'\nimport {createContext} from 'react'\n\nexport interface IDimensions {\n    width: number,\n    height: number,\n    ratio: number\n}\n\ninterface IDimensionsContext {\n    dimensions: IDimensions,\n    setDimensions: Dispatch<SetStateAction<IDimensions>>\n}\n\nexport default createContext<IDimensionsContext | null>(null)","import './Title.css'\nexport default function Title() {\n    return(\n        <div className='title'>\n            <h1>Esteban's Great Simple Paint</h1>\n        </div>\n    )\n}","import React from 'react'\nimport {RGBColor} from 'react-color'\nexport default class Canvas {\n\n    canvas: HTMLCanvasElement\n    ratio: number = 15\n    context: CanvasRenderingContext2D\n\n     \n    constructor(ref: React.RefObject<HTMLCanvasElement>){\n        this.canvas = ref.current!\n        this.context = this.canvas.getContext('2d')!\n    }\n    \n    wipeCanvas() {\n        this.context.globalCompositeOperation = 'destination-over'\n        this.context.fillStyle = 'white'\n        this.context.fillRect(0,0,this.canvas.width,this.canvas.height)\n        this.context.globalCompositeOperation = 'source-over'\n    }\n\n    matchColor(colora: RGBColor,colorb: RGBColor) {\n        return colora.r === colorb.r\n            && colora.g === colorb.g\n            && colora.b === colorb.b\n    }\n\n    drawPixel(x:number,y: number,color:RGBColor = {r:0,g:0,b:0}) {\n        const {r,g,b} = color\n        this.context.fillStyle = `rgb(${r},${g},${b})`\n        this.context.fillRect(x,y,this.ratio,this.ratio)\n    }\n\n    getColor(x: number,y: number){\n        const colorData = this.context.getImageData(x,y,1,1).data\n        return({\n            r: colorData[0],\n            g: colorData[1],\n            b: colorData[2],\n            a: colorData[3]\n        })\n    }\n\n    setSquare(canvasData: ImageData, pos: number, color:RGBColor = {r:0,g:0,b:0}){\n\n        for(let j = pos, step = 0; step < this.ratio; j += this.canvas.width * 4, step++){\n            for(let i = j; i < j + (this.ratio * 4); i += 4 ){\n                canvasData.data[i] = color.r;\n                canvasData.data[i+1] = color.g;\n                canvasData.data[i+2] = color.b;\n                canvasData.data[i+3] = 255;\n            }\n        }\n        return canvasData\n    }\n\n    /*\n        Adapted from William Malone's fill algorithm\n        http://www.williammalone.com/articles/html5-canvas-javascript-paint-bucket-tool/\n    */\n    fill(tx: number,ty: number,color: RGBColor = {r:0 ,g:0, b:0, a: 1}) {\n        const baseColor = this.getColor(tx,ty)\n        if (this.matchColor(baseColor, color)) return;\n        let canvasData = this.context.getImageData(0,0,this.canvas.width,this.canvas.height)\n        let pixelStack = [[tx, ty]];\n        let x, y, newPos, pos, left, right\n        while(pixelStack.length){\n            newPos = pixelStack.pop();\n            x = newPos![0];\n            y = newPos![1];\n            \n            pos = (y* this.canvas.width + x) * 4;\n            let upPos = pos - (this.canvas.width * this.ratio * 4)\n            while(y - this.ratio >= 0 && this.matchColor(baseColor,{\n                r: canvasData.data[upPos],\n                g: canvasData.data[upPos+1],\n                b: canvasData.data[upPos+2]}))\n            {\n              y -= this.ratio\n              pos -= this.canvas.width * this.ratio * 4;\n              upPos = pos - (this.canvas.width * this.ratio * 4)\n            }\n            left = false;\n            right = false;\n            //traverse down\n            while(y < this.canvas.height && this.matchColor(baseColor,{\n                r: canvasData.data[pos],\n                g: canvasData.data[pos+1],\n                b: canvasData.data[pos+2]}))\n            {\n                canvasData = this.setSquare(canvasData,pos,color);\n                \n                if(x > this.ratio - 1){\n                    let curColor = {\n                        r: canvasData.data[pos - (4 * this.ratio)],\n                        g: canvasData.data[pos - (4 * this.ratio) + 1],\n                        b: canvasData.data[pos - (4 * this.ratio) + 2]}\n                        if(this.matchColor(baseColor,curColor))\n                        {\n                            if(!left){\n                            pixelStack.push([x - this.ratio, y]);\n                            left = true;\n                        }\n                    }\n                    else if(left)\n                    {\n                        left = false;\n                    }\n                }\n                \n                if(x < this.canvas.width - this.ratio)\n                {\n                    let curColor = {\n                        r: canvasData.data[pos + (4 * this.ratio)],\n                        g: canvasData.data[pos + (4 * this.ratio) + 1],\n                        b: canvasData.data[pos + (4 * this.ratio) + 2]\n                    }\n                    if(this.matchColor(baseColor,curColor))\n                    {\n                        if(!right){\n                            pixelStack.push([x + this.ratio, y]);\n                            right = true;\n                        }\n                    }\n                    else if(right){\n                        right = false;\n                    }\n                }\n                        \n                pos += this.canvas.width * this.ratio * 4;\n                y+= this.ratio\n            }\n        }\n        this.context.putImageData(canvasData, 0, 0);\n    }\n\n    init( width: number = 50, height: number= 50, ratio?: number ){\n        if (ratio) this.ratio = ratio\n        this.canvas.width = width * this.ratio\n        this.canvas.height = height * this.ratio\n        this.wipeCanvas()\n    }\n}","import './Board.css'\nimport Canvas from './Canvas'\nimport {useRef, useEffect, useState, useContext} from 'react'\nimport ColorContext from '../../state/Color'\nimport DimensionsContext from '../../state/Dimensions'\nimport ToolContext, {ToolOption} from '../../state/Tool'\n\nexport default function Board() {\n    \n    //Context\n    const color = useContext(ColorContext)!.color\n    const dimensions = useContext(DimensionsContext)!.dimensions\n    const tool = useContext(ToolContext)!.tool\n    \n    //Hooks\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const [board, setBoard] = useState<Canvas | null>(null)\n    \n    useEffect(() => {\n        setBoard(new Canvas(canvasRef))\n    }, [])\n\n    useEffect(() => {\n        if (board){\n            board.init(dimensions.width,dimensions.height, dimensions.ratio)\n        }\n    },[board,dimensions.width,dimensions.height,dimensions.ratio])\n\n    //Event Handlers\n    function handleCLick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>){\n        const {x, y} = getPixelOrigin(e.pageX, e.pageY)\n        switch (tool) {\n            case ToolOption.PENCIL:\n                board!.drawPixel(x,y,color)\n                break;\n            case ToolOption.FILL:\n                board!.fill(x,y,color)\n                break;\n        }\n    }\n    //Helper functions\n    function getPixelOrigin(x: number,y: number){\n        const canvas = canvasRef.current!\n        const rect = canvas.getBoundingClientRect()\n        const left = rect.left + window.scrollX;\n        const top = rect.top + window.scrollY;\n        const right = rect.right  + window.scrollX;\n        const bottom = rect.bottom + window.scrollY;\n    \n        const originX = Math.trunc(((x - left) / (right - left) * canvas.width) / dimensions.ratio) * dimensions.ratio\n        const originY = Math.trunc(((y - top) / (bottom - top) * canvas.height) / dimensions.ratio) * dimensions.ratio\n        return {\n            x: originX,\n            y: originY\n        }\n    }\n\n    return(\n        <div className='board'>\n            <canvas \n                ref={canvasRef}\n                onClick={ e => handleCLick(e)}\n            >    \n            </canvas>\n        </div>\n    )\n}","import {useContext} from 'react'\nimport ColorContext from '../../../state/Color'\nimport { TwitterPicker} from 'react-color'\nimport './ColorPicker.css'\n\nconst presets = ['#000000','#FFFFFF','#EB144C','#0693E3','#00D084']\n\nfunction ColorPicker(){\n  const ctxColor = useContext(ColorContext)\n    return(\n        <TwitterPicker\n        color={ctxColor?.color}\n        colors={presets}\n        triangle='hide'\n        width='356px'\n        onChange={color => ctxColor?.setColor(color.rgb)}\n      />\n    )\n}\n\nexport default ColorPicker","import './Dimensions.css'\nimport {useContext} from 'react'\nimport DimensionsContext from '../../../state/Dimensions'\n\nexport default function Dimensions(){\n    \n    //Dimension constraints\n    const maxSize = 75\n    const minSize = 2\n\n    //Context\n    const ctxDimensions = useContext(DimensionsContext)\n    const {dimensions,setDimensions} = ctxDimensions!\n\n    //Event Handler\n    function changeDimensions(e: React.ChangeEvent<HTMLInputElement>){\n        const {name, value} = e.target\n        let number = Math.floor(Number(value))\n        if (number < minSize) {\n            number = minSize\n        } else if (number > maxSize){\n            number = maxSize\n        }\n        setDimensions({\n            ...dimensions,\n            [name]: number\n        })\n    }\n\n    return(\n        <div className=\"Dimensions\">\n            <input\n                name='width'\n                type='number'\n                className='Dimensions-Input'\n                value={dimensions.width}\n                onChange={ e => {changeDimensions(e)}}/>\n            \n            <p className=\"Dimensions-Separator\">x</p>\n            \n            <input\n                name='height'\n                type='number'\n                className='Dimensions-Input'\n                value={dimensions.height}\n                onChange={ e => {changeDimensions(e)}}/>\n        </div>\n    )\n}","import './Tools.css'\nimport {useContext} from 'react'\nimport ToolContext, {ToolOption} from '../../../state/Tool'\n\nimport { RiPencilFill,RiPaintFill } from 'react-icons/ri';\n\nexport default function Tools() {\n\n    const {tool,setTool} = useContext(ToolContext)!\n\n    return(\n        <div className=\"Tools\">\n            <div \n                className={tool === ToolOption.PENCIL ? 'Tools-Container Tools-Selected' : 'Tools-Container'}>\n                <RiPencilFill\n                    className='Tools-Tool'\n                    onClick={()=>{setTool(ToolOption.PENCIL)}}/>\n            </div>\n            <div \n                className={tool === ToolOption.FILL ? 'Tools-Container Tools-Selected' : 'Tools-Container'}>\n                <RiPaintFill\n                    className='Tools-Tool'\n                    onClick={()=>{setTool(ToolOption.FILL)}}/>\n            </div>\n        </div>\n    )\n}","import './ToolBox.css'\nimport ColorPicker from './ColorPicker'\nimport Dimensions from './Dimensions'\nimport Tools from './Tools'\n\nfunction ToolBox() {\n    return(\n        <div className='ToolBox'>\n            <Tools/>\n            <ColorPicker/>\n            <Dimensions/>\n        </div>\n    )\n}\n\nexport default ToolBox","import {useState} from 'react'\nimport {RGBColor} from 'react-color'\nimport ToolContext, {ToolOption} from './state/Tool'\nimport ColorContext from './state/Color'\nimport DimensionsContext, {IDimensions} from './state/Dimensions'\nimport Title from './components/Title'\nimport Board from './components/Board'\nimport ToolBox from './components/ToolBox'\nimport './App.css';\n\nfunction App() {  \n\n  const [tool,setTool] = useState<ToolOption>(ToolOption.PENCIL)\n  const [color,setColor] = useState<RGBColor>({\n    r:0,\n    g:0,\n    b:0,\n    a:1\n  })\n  const [dimensions, setDimensions] = useState<IDimensions>({\n    width: 35,\n    height: 25,\n    ratio: 30\n  })\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <ColorContext.Provider value={{color, setColor}}>\n        <ToolContext.Provider value={{tool,setTool}}>\n          <DimensionsContext.Provider value={{dimensions,setDimensions}}>\n            <ToolBox/>\n            <Board/>\n          </DimensionsContext.Provider>\n        </ToolContext.Provider>\n      </ColorContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}